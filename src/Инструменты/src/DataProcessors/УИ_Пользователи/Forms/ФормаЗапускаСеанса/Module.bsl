
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "ИмяПользователяИБ, УИДПользователяИБ, АвтоЗапуск");
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если АвтоЗапуск Тогда
		Запустить("");
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ВыполненаПодменаПароля Тогда
		ВернутьИсходныйПарольПользователя(УИДПользователяИБ, СохраняемоеЗначениеПароляИсходное);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиКомандФормы

// Код процедур и функций


&НаКлиенте
Процедура Запустить(Команда)
	#Если НЕ ВебКлиент Тогда
		
		ДанныеСменыПароля = УстановитьВременыйПарольПользователя(УИДПользователяИБ);
		СохраняемоеЗначениеПароляИсходное = ДанныеСменыПароля.СохраняемоеЗначениеПароляИсходное;
		ВыполненаПодменаПароля = Истина;
		
		ЗапуститьСистему("/N " + ИмяПользователяИБ + " /P " + ДанныеСменыПароля.НовыйПароль);
		
		Элементы.Запустить.Видимость = Ложь;
		Элементы.ДекорацияСообщениеОЗапускеСеанса.Видимость = Истина;
		СчетчикЗакрытияФормы = 10;
		ОбновитьСообщениеОЗапускеСеанса();
		ПодключитьОбработчикОжидания("ЗакрытиеФормы", 1, Истина);
		
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗакрытиеФормы()
	Если СчетчикЗакрытияФормы > 0 Тогда
		СчетчикЗакрытияФормы = СчетчикЗакрытияФормы - 1;
		ОбновитьСообщениеОЗапускеСеанса();
		ПодключитьОбработчикОжидания("ЗакрытиеФормы", 1, Истина);
	Иначе
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСообщениеОЗапускеСеанса()
	Элементы.ДекорацияСообщениеОЗапускеСеанса.Заголовок = 
	"Сеанс пользователя запущен, исходный пароль будет возвращен через " + СчетчикЗакрытияФормы + " с.";
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьВременыйПарольПользователя(УИДПользователяИБ)
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИДПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		ВызватьИсключение "Не найден пользователь ИБ";
	КонецЕсли;
	
	СохраняемоеЗначениеПароляИсходное = Неопределено;
	НовыйПароль = "" + Новый УникальныйИдентификатор();
	
	Если ПользовательИБ.АутентификацияСтандартная Тогда
		СохраняемоеЗначениеПароляИсходное = ПользовательИБ.СохраняемоеЗначениеПароля;
	Иначе
		ПользовательИБ.АутентификацияСтандартная = Истина;
	КонецЕсли;
	
	ПользовательИБ.Пароль = НовыйПароль;
	ПользовательИБ.Записать();
	
	Возврат Новый Структура("СохраняемоеЗначениеПароляИсходное, НовыйПароль", СохраняемоеЗначениеПароляИсходное, НовыйПароль);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВернутьИсходныйПарольПользователя(УИДПользователяИБ, СохраняемоеЗначениеПароляИсходное)
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИДПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		ВызватьИсключение "Не найден пользователь ИБ";
	КонецЕсли;
	
	Если СохраняемоеЗначениеПароляИсходное = Неопределено Тогда
		ПользовательИБ.АутентификацияСтандартная = Ложь;
	Иначе
		ПользовательИБ.СохраняемоеЗначениеПароля = СохраняемоеЗначениеПароляИсходное;
	КонецЕсли;
	
	ПользовательИБ.Записать();
	
КонецПроцедуры

#КонецОбласти
